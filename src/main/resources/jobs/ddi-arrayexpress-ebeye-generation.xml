<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:bean="http://www.springframework.org/schema/beans" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
		                   http://www.springframework.org/schema/batch
                           http://www.springframework.org/schema/batch/spring-batch.xsd
		                   http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-3.1.xsd">


    <description>
        This job generate the XML for a Metabolights to be submitted to OmicsDI system.
    </description>

    <batch:job id="ddiAnnotationJob" xmlns="http://www.springframework.org/schema/batch">

        <batch:step id="generateXML" parent="parentStep" next="copyFilesToData">
            <batch:tasklet>
                <bean:bean id="generateXMLStep" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.generation.GenerationArrayExpressXML">
                    <bean:property name="experimentFileName" value="${ddi.common.arrayexpress.experiment.file}"/>
                    <bean:property name="protocolFileName" value="${ddi.common.arrayexpress.protocol.file}"/>
                    <bean:property name="outputFile"  value="${ddi.common.arrayexpress.ddi.file}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="copyFilesToData" parent="parentStep" next="validateXMLStep">
            <batch:tasklet>
                <bean:bean id="copyFilesToDataOrigin" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.CopyFilesWithPatternFromSourceTasklet">
                    <bean:property name="inputDirectory" value="file:${ddi.common.arrayexpress.original.directory}" />
                    <bean:property name="outputDirectory" value="file:${ddi.common.arrayexpress.data.directory}" />
                    <bean:property name="pattern" value="${ddi.common.original.arrayexpress.prefix}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="validateXMLStep" parent="parentStep" next="splitterStep">
            <batch:tasklet>
                <bean:bean id="validateEbEXmlTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.validation.ValidationOriginalDataTasklet">
                    <bean:property name="directory" value="${ddi.common.arrayexpress.data.directory}"/>
                    <bean:property name="reportName" value="${ddi.common.original.report.name}"/>
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="splitterStep" parent="parentStep" next="importDataStep">
            <batch:tasklet>
                <bean:bean id="splitterTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.SplitterFromSource">
                    <bean:property name="inputDirectory" value="file:${ddi.common.arrayexpress.data.directory}"/>
                    <bean:property name="outputDirectory" value="file:${ddi.common.arrayexpress.annotated.directory}"/>
                    <bean:property name="originalPrefix"  value="${ddi.common.original.arrayexpress.prefix}" />
                    <bean:property name="numberEntries"   value="${ddi.common.multiple.file.number.entries}"/>
                    <bean:property name="filePrefix"      value="${ddi.common.arrayexpress.prefix}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="importDataStep" parent="parentStep" next="annotationFiles">
            <batch:tasklet>
                <bean:bean id="annotationTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.database.DatasetImport">
                    <bean:property name="inputDirectory" value="file:${ddi.common.arrayexpress.annotated.directory}"/>
                    <bean:property name="datasetAnnotationService" ref="datasetAnnotationService" />
                    <bean:property name="databaseAnnotationService" ref="databaseAnnotationService" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="annotationFiles" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="annotationArrayExpressTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.annotation.ArrayExpressAnnotationTasklet">
                    <bean:property name="databaseName" value="${ddi.common.arrayexpress.database.name}"/>
                    <bean:property name="datasetAnnotationService" ref="datasetAnnotationService" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:listeners>
            <batch:listener ref="jobListener"/>
        </batch:listeners>
    </batch:job>

    <batch:job id="ddiEnrichmentJob" xmlns="http://www.springframework.org/schema/batch">
        <batch:step id="enrihmentStep" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="enrichmentTask" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.enrichment.EnrichmentXMLTasklet">
                    <bean:property name="databaseName" value="file:${ddi.common.arrayexpress.database.name}" />
                    <bean:property name="annotationService" ref="annotationService"/>
                    <bean:property name="dataType" >
                        <util:constant static-field="uk.ac.ebi.ddi.annotation.utils.DataType.TRANSCRIPTOMIC_DATA"/>
                    </bean:property>
                </bean:bean>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <batch:job id="moveToProductionJob" xmlns="http://www.springframework.org/schema/batch">
        <batch:step id="cleanStep" next="moveToProductionStep" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="cleanTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.CleanDirectory">
                    <bean:property name="inputDirectory" value="file:${ddi.common.arrayexpress.prod.directory}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="moveToProductionStep" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="copyFilesWithPatternFromSourceTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.CopyFilesWithPatternFromSourceTasklet">
                    <bean:property name="inputDirectory" value="file:${ddi.common.arrayexpress.annotated.directory}"/>
                    <bean:property name="outputDirectory" value="file:${ddi.common.arrayexpress.prod.directory}"/>
                    <bean:property name="pattern"      value="${ddi.common.arrayexpress.prefix}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <batch:step id="parentStep" abstract="true">
        <batch:listeners>
            <batch:listener ref="executionContextPromotionListener"/>
            <batch:listener ref="throwablePromotionListener"/>
        </batch:listeners>
    </batch:step>

    <!--listener for promoting properties in step execution context to job execution context-->
    <bean:bean id="executionContextPromotionListener" class="org.springframework.batch.core.listener.ExecutionContextPromotionListener">
        <bean:property name="keys">
            <bean:array>
                <bean:value>public.path.fragment</bean:value>
                <!-- added by getAndStoreOrigPublicationDateTaskletStep; used by genPublicSearchParamsStep -->
            </bean:array>
        </bean:property>
        <bean:property name="strict" value="false"/>
    </bean:bean>

    <!--load property files-->
    <context:property-placeholder location="classpath:prop/common.properties" ignore-unresolvable="true" order="1"/>


</beans>